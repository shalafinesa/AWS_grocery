{\rtf1\ansi\ansicpg1252\cocoartf2822
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28900\viewh15740\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # \uc0\u55357 \u57042  AWS GroceryMate \'96 Backend & Cloud Setup\
\
**Author:** Finesa Shala  \
**GitHub:** [https://github.com/shalafinesa/AWS_grocery](https://github.com/shalafinesa/AWS_grocery)  \
**Date:** September 23, 2025\
\
---\
\
## \uc0\u55357 \u56523  Table of Contents\
1. [Project Overview](#project-overview)  \
2. [Architecture Overview](#architecture-overview)  \
3. [AWS Infrastructure Components](#aws-infrastructure-components)  \
4. [Deployment & Setup](#deployment--setup)  \
5. [Environment Variables](#environment-variables)  \
6. [Future Enhancements](#future-enhancements)  \
7. [License](#license)  \
\
---\
\
## \uc0\u55357 \u56633  Project Overview\
AWS GroceryMate is a hands-on project demonstrating a backend application for an online grocery store.  \
\
The project showcases:\
- Backend REST API development with Python\
- Dockerized services for local deployment\
- Integration with AWS services for storage and database\
- Basic understanding of cloud deployment and infrastructure\
\
> This version reflects my own work, focused on backend services, storage integration, and Docker deployment.\
\
---\
\
## \uc0\u55356 \u57314  Architecture Overview\
\
![AWS GroceryMate Architecture](./architecture-diagram.png)  \
*Include your architecture diagram image in the repository at `architecture-diagram.png`*\
\
Components:\
- **VPC**: Default setup for local testing / optional AWS deployment\
- **EC2**: Dockerized backend server (manual setup, no auto-scaling)\
- **ALB**: Routes traffic to EC2 instance (optional for AWS deployment)\
- **RDS**: PostgreSQL database\
- **S3 Bucket**: Storage for static assets and user avatars  \
\
> Note: Auto Scaling Groups and Terraform modules were removed because they were not part of my implementation. The architecture reflects the actual local setup.\
\
---\
\
## \uc0\u9881 \u65039  AWS Infrastructure Components\
| Component | Purpose |\
|-----------|---------|\
| **EC2** | Runs the backend application inside a Docker container |\
| **ALB** | Optional load balancer for routing traffic to the instance |\
| **RDS** | PostgreSQL database storing products, users, and orders |\
| **S3** | Storage for static assets (product images, avatars) |\
| **IAM** | Access roles for EC2 and S3 |\
\
---\
\
## \uc0\u55357 \u56960  Deployment & Setup\
\
### Step 1: Clone Repository\
```bash\
git clone https://github.com/shalafinesa/AWS_grocery.git\
cd AWS_grocery/backend\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 ```\
\
### Step 2: Install Dependencies\
```bash\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 pip install -r requirements.txt\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 ```\
\
### Step 3: Run Backend (Docker optional)\
## Without Docker:\
```bash\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 python run.py\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 ```\
\
## With Docker:\
```bash\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 docker run --network host \\\
  -e S3_BUCKET_NAME=your_bucket_name \\\
  -e POSTGRES_USER=grocery_user \\\
  -e POSTGRES_PASSWORD=your_db_password \\\
  -e POSTGRES_DB=grocerymate_db \\\
  -e POSTGRES_HOST=<RDS_ENDPOINT> \\\
  -e JWT_SECRET_KEY=your_jwt_secret \\\
  -p 5000:5000 grocerymate\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 ```\
\
### Step 4: Access Application\
\
- **Backend API endpoints:**  \
  - `http://localhost:5000`\
\
- **Example routes:**  \
  - `/api/products/` \'96 Get all products  \
  - `/api/products/\{id\}/` \'96 Get product by ID  \
  - `/api/auth/login` \'96 User login  \
  - `/api/orders/` \'96 Manage orders\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
### \uc0\u55357 \u56593  Environment Variables\
\
| Variable           | Purpose                                  |\
|-------------------|------------------------------------------|\
| JWT_SECRET_KEY     | Secret key for JWT authentication       |\
| POSTGRES_USER      | Database username                        |\
| POSTGRES_PASSWORD  | Database password                        |\
| POSTGRES_DB        | Database name                            |\
| POSTGRES_HOST      | RDS or local database host               |\
| S3_BUCKET_NAME     | Bucket name for static files             |\
| S3_REGION          | Bucket region                             |\
\
\
### \uc0\u55357 \u56481  Future Enhancements\
\
- Connect backend to more AWS services (Lambda, EventBridge)  \
- Add automated deployment scripts  \
- Improve API security and monitoring\
\
### \uc0\u55357 \u56540  License\
\
This project is licensed under the **MIT License** and is free for non-commercial use.\
}